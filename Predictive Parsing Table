//Construction of a Predictive Parsing Table
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

char FIRST[MAX][MAX], FOLLOW[MAX][MAX], T[MAX], NT[MAX], G[MAX][MAX];
int LL1[MAX][MAX], nt = 0, t = 0, cr = 0;

void add_symbol(char *arr, char ch) {
    if (!strchr(arr, ch)) strncat(arr, &ch, 1);
}

void compute_FIRST(char *arr, char ch) {
    if (!isupper(ch)) add_symbol(arr, ch);
    else {
        for (int i = 0; i < cr; i++)
            if (G[i][0] == ch)
                G[i][3] == '!' ? add_symbol(arr, '!') : compute_FIRST(arr, G[i][3]);
    }
}

void compute_FOLLOW(char *arr, char ch) {
    if (ch == G[0][0]) add_symbol(arr, '$');
    for (int i = 0; i < cr; i++) {
        for (int j = 3; G[i][j]; j++) {
            if (G[i][j] == ch) {
                if (G[i][j + 1] && isupper(G[i][j + 1])) {
                    int k = strchr(NT, G[i][j + 1]) - NT;
                    for (int l = 0; FIRST[k][l]; l++)
                        if (FIRST[k][l] != '!') add_symbol(arr, FIRST[k][l]);
                        else compute_FOLLOW(arr, G[i][0]);
                } else if (G[i][j + 1]) add_symbol(arr, G[i][j + 1]);
                else if (G[i][0] != ch) compute_FOLLOW(arr, G[i][0]);
            }
        }
    }
}

void display_sets(char set[MAX][MAX], char *name) {
    printf("\n%s:\n", name);
    for (int i = 0; i < nt; i++) {
        printf("%s(%c): { %s }\n", name, NT[i], set[i]);
    }
}

int create_LL1_table() {
    for (int i = 0; i < cr; i++) {
        char first[MAX] = "", follow[MAX] = "";
        compute_FIRST(first, G[i][3]);
        if (strchr(first, '!')) compute_FOLLOW(follow, G[i][0]);
        int pos = strchr(NT, G[i][0]) - NT;
        for (int j = 0; first[j]; j++) {
            if (first[j] == '!') continue;
            int col = strchr(T, first[j]) - T;
            if (LL1[pos][col]) {
                printf("Conflict between %s and %s! Grammar is not LL(1).\n", G[LL1[pos][col] - 1], G[i]);
                return 1;
            }
            LL1[pos][col] = i + 1;
        }
    }
    return 0;
}

void display_parsing_table() {
    printf("\nPredictive Parsing Table:\n\t");
    for (int j = 0; j < t; j++) printf("%c\t", T[j]);
    printf("\n-----------------------------------\n");
    for (int i = 0; i < nt; i++) {
        printf("%c |\t", NT[i]);
        for (int j = 0; j < t; j++)
            printf("%s\t", LL1[i][j] ? G[LL1[i][j] - 1] : "_");
        printf("\n");
    }
}

int main() {
    int num_rules;
    printf("Enter the number of production rules: ");
    scanf("%d", &num_rules);
    getchar();  // To consume newline character

    printf("Enter the production rules in A->B format:\n");
    for (int i = 0; i < num_rules; i++) {
        printf("Rule %d: ", i + 1);
        scanf("%s", G[cr]);
        if (!strchr(NT, G[cr][0])) NT[nt++] = G[cr][0];
        for (int j = 3; G[cr][j]; j++)
            if (!isupper(G[cr][j]) && G[cr][j] != '!' && !strchr(T, G[cr][j]))
                T[t++] = G[cr][j];
        cr++;
    }

    for (int i = 0; i < nt; i++) compute_FIRST(FIRST[i], NT[i]);
    for (int i = 0; i < nt; i++) compute_FOLLOW(FOLLOW[i], NT[i]);
    display_sets(FIRST, "FIRST"), display_sets(FOLLOW, "FOLLOW");
    strcat(T, "$"), t++;
    if (!create_LL1_table()) display_parsing_table();
    return 0;
}
