#include <stdio.h>
#include <string.h>

int nt, t, top = 0;
char s[50], NT[10], T[10], st[50], l[10][10], tr[50][50];

int searchnt(char a) {
    for (int i = 0; i < nt; i++) {
        if (NT[i] == a)
            return i;
    }
    return -1;
}

int searchter(char a) {
    for (int i = 0; i < t; i++) {
        if (T[i] == a)
            return i;
    }
    return -1;
}

void push(char a) {
    s[top] = a;
    top++;
}

char pop() {
    top--;
    return s[top];
}

void installl(int a, int b) {
    if (l[a][b] == 'f') {
        l[a][b] = 't';
        push(T[b]);
        push(NT[a]);
    }
}

void installt(int a, int b) {
    if (tr[a][b] == 'f') {
        tr[a][b] = 't';
        push(T[b]);
        push(NT[a]);
    }
}

int main() {
    int n;
    printf("Enter the no of productions: ");
    scanf("%d", &n);

    // Handle productions input
    char pr[n][30];
    printf("Enter the productions one by one:\n");
    for (int i = 0; i < n; i++) {
        scanf("%s", pr[i]);
    }

    nt = 0; // Initialize the count of non-terminals
    t = 0;  // Initialize the count of terminals

    // Identifying Non-Terminals
    for (int i = 0; i < n; i++) {
        if (searchnt(pr[i][0]) == -1) {
            NT[nt++] = pr[i][0];
        }
    }

    // Identifying Terminals
    for (int i = 0; i < n; i++) {
        for (int j = 3; j < strlen(pr[i]); j++) {
            if (searchnt(pr[i][j]) == -1) {
                if (searchter(pr[i][j]) == -1) {
                    T[t++] = pr[i][j];
                }
            }
        }
    }

    // Initialize the Leading and Trailing tables
    for (int i = 0; i < nt; i++) {
        for (int j = 0; j < t; j++) {
            l[i][j] = 'f';  // 'f' means false
            tr[i][j] = 'f'; // 'f' means false
        }
    }

    // Calculating Leading sets
    for (int i = 0; i < nt; i++) {
        for (int j = 0; j < n; j++) {
            if (NT[searchnt(pr[j][0])] == NT[i]) {
                if (searchter(pr[j][3]) != -1) {
                    installl(searchnt(pr[j][0]), searchter(pr[j][3]));
                } else {
                    for (int k = 3; k < strlen(pr[j]); k++) {
                        if (searchnt(pr[j][k]) == -1) {
                            installl(searchnt(pr[j][0]), searchter(pr[j][k]));
                            break;
                        }
                    }
                }
            }
        }
    }

    while (top != 0) {
        char b = pop();
        char c = pop();
        for (int s = 0; s < n; s++) {
            if (pr[s][3] == b) {
                installl(searchnt(pr[s][0]), searchter(c));
            }
        }
    }

    // Output Leading sets
    for (int i = 0; i < nt; i++) {
        printf("Leading[%c]\t{", NT[i]);
        for (int j = 0; j < t; j++) {
            if (l[i][j] == 't') {
                printf("%c,", T[j]);
            }
        }
        printf("}\n");
    }

    // Reset for Trailing sets
    top = 0;
    for (int i = 0; i < nt; i++) {
        for (int j = 0; j < n; j++) {
            if (NT[searchnt(pr[j][0])] == NT[i]) {
                if (searchter(pr[j][strlen(pr[j]) - 1]) != -1) {
                    installt(searchnt(pr[j][0]), searchter(pr[j][strlen(pr[j]) - 1]));
                } else {
                    for (int k = strlen(pr[j]) - 1; k >= 3; k--) {
                        if (searchnt(pr[j][k]) == -1) {
                            installt(searchnt(pr[j][0]), searchter(pr[j][k]));
                            break;
                        }
                    }
                }
            }
        }
    }

    while (top != 0) {
        char b = pop();
        char c = pop();
        for (int s = 0; s < n; s++) {
            if (pr[s][3] == b) {
                installt(searchnt(pr[s][0]), searchter(c));
            }
        }
    }

    // Output Trailing sets
    for (int i = 0; i < nt; i++) {
        printf("Trailing[%c]\t{", NT[i]);
        for (int j = 0; j < t; j++) {
            if (tr[i][j] == 't') {
                printf("%c,", T[j]);
            }
        }
        printf("}\n");
    }

    return 0;
}
